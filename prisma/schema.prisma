generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Core Application Tables
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Character Profile Information
  age             Int?
  location        String?
  background      String?  @db.Text
  goals           String?  @db.Text
  diet            String?
  avatarUrl       String?
  
  // Life Domain Details
  occupation      String?
  fitnessLevel    String?
  learningGoals   String?  @db.Text
  socialGoals     String?  @db.Text
  financialGoals  String?  @db.Text
  creativeGoals   String?  @db.Text
  purposeGoals    String?  @db.Text
  
  // Onboarding Status
  onboardingComplete Boolean @default(false)
  
  // Relations
  accounts        Account[]
  sessions        Session[]
  journalEntries  JournalEntry[]
  characterStats  CharacterStats[]
  quests          Quest[]
  xpTransactions  XPTransaction[]
  
  @@map("users")
}

model JournalEntry {
  id          String   @id @default(cuid())
  userId      String
  content     String   @db.Text
  processed   Boolean  @default(false)
  auraResponse String? @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("journal_entries")
}

model CharacterStats {
  id        String   @id @default(cuid())
  userId    String
  statType  StatType
  xp        Int      @default(0)
  level     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, statType])
  @@map("character_stats")
}

model Quest {
  id            String      @id @default(cuid())
  userId        String
  title         String
  description   String      @db.Text
  statType      StatType
  status        QuestStatus @default(ACTIVE)
  xpReward      Int         @default(10)
  createdAt     DateTime    @default(now())
  completedAt   DateTime?
  dueDate       DateTime?
  
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("quests")
}

model XPTransaction {
  id          String   @id @default(cuid())
  userId      String
  statType    StatType
  amount      Int
  reason      String
  source      String?  // e.g., "journal_entry", "quest_completion"
  sourceId    String?  // reference to the source record
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("xp_transactions")
}

// Enums
enum StatType {
  VITALITY
  INTELLECT
  CHARISMA
  RESOURCES
  CREATIVITY
  PURPOSE
}

enum QuestStatus {
  ACTIVE
  COMPLETED
  EXPIRED
  PAUSED
}